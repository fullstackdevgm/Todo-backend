{
    "swagger": "2.0",
    "info": {
        "version": "v1",
        "title": "Todo Cloud API",
        "description": "\nThis is the first version of the Todo Cloud API. The API is initially being\nbuilt for the web and desktop versions of the Todo Cloud app, but it'll also\nbe made available to third parties so that users can get access to their own\ndata from anywyere. It'll be exciting to see what the community is able to\nbuild and see the amazing innovations that come from this.\n\nIf you are a third-party developer, please contact developer@appigo.com to\nregister your app and get a developer API key.\n\nAll endpoints are only accessible via https and are located at\n`api.todo-cloud.com`. For example, once your app is authenticated, you can\nget the authenticated user's lists by accessing the following URL (replace\nAPI-KEY with your own):\n```\n  https://api.todo-cloud.com/beta/lists?api_key=API-KEY // During development\n```\nOr:\n```\n  http://localhost:8989/api/v1/lists?api_key=API-KEY // During local development\n```\nOr:\n```\n  https://api.todo-cloud.com/v1/lists?api_key=API-KEY // When it's live\n```\n\nYou'll need to use a JSON Web Token (JWT) for the authenticated user for\neach endpoint, though some endpoints may not require it.\n\nThe JWT will give your app access to user content and in such case it means\nthat your app will be operating on a per-JWT limit vs. the same limit for\nyour general api_key.\n\nKeep in mind that if you make an API call requiring authentication and your\nJWT is expired, you'll receive a 401 Unauthorized response. If this occurs,\nyou should request a new JWT and try the original call again.\n\n## Limits\nTBD: We need to figure out what to do here.\n\nExample of what we could put:\n\nBe nice. If you're sending too many requests too quickly, we'll send back a\n`503` error code (server unavailable).\nYou are limited to 5000 requests per hour per `jwt` or `api_key`\noverall. Practically, this means you should (when possible) authenticate\nusers so that limits are well outside the reach of a given user.\n\n## Deleting Objects\nWe do our best to have all our URLs be\n[RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer).\nEvery endpoint (URL) may support one of four different http verbs. GET\nrequests fetch information about an object, POST requests create objects,\nPUT requests update objects, and finally DELETE requests will delete\nobjects.\n\n## Structure\n\n### The Envelope\nEvery response is contained by an envelope. That is, each response has a\npredictable set of keys with which you can expect to interact:\n```json\n{\n    \"data\": {\n        ...\n    },\n    \"pagination\": {\n        \"next_url\": \"...\",\n        \"next_offset\": \"47\"\n    }\n}\n```\n\n#### DATA\nThe data key is the meat of the response. It may be a list or dictionary,\nbut either way this is where you'll find the data you requested.\n#### PAGINATION\nSometimes you just can't get enough. For this reason, we've provided a\nconvenient way to access more data in any request for sequential data.\nSimply call the url in the next_url parameter and we'll respond with the\nnext set of data.\n```json\n{\n    ...\n    \"pagination\": {\n        \"next_url\": \"https://api.todo-cloud.com/v1/lists?offset=47\",\n        \"next_offset\": \"47\"\n    }\n}\n```\nOn views where pagination is present, we also support the \"count\" parameter.\nSimply set this to the number of items you'd like to receive. Note that the\ndefault values should be fine for most applications - but if you decide to\nincrease this number there is a maximum value defined on each endpoint.\n"
    },
    "host": "api.todo-cloud.com",
    "basePath": "/beta",
    "schemes": [
        "https"
    ],
    "paths": {
       "/authenticate": {
            "post": {
                "description": "Request a new JSON Web Token (JWT).",
                "operationId": "authenticate",
                "security": [
                    {
                      "api_key": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Credentials",
                        "in": "body",
                        "description": "Username and password credentials.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Credentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JSON Web Token which should be saved by the client and passed in subsequent API calls\nusing the `Authorization: Bearer <token>` header.\n",
                        "schema": {
                            "$ref": "#/definitions/JWT"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "User not found, bad password, etc. (UserOrPasswordInvalid)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "503": {
                        "description": "User is temporarily unavailable or in maintenance mode (UserMaintenance)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":503.*": {
                            "statusCode": "503",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:authenticate:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/authenticate/refresh": {
            "get": {
                "description": "Request a new JSON Web Token (JWT) with an existing valid JWT.",
                "operationId": "refreshAuthentication",
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "JSON Web Token which should be saved by the client and passed in subsequent API calls\nusing the `Authorization: Bearer <token>` header.\n",
                        "schema": {
                            "$ref": "#/definitions/JWT"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "User not found, bad password, etc. (UserOrPasswordInvalid)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "503": {
                        "description": "User is temporarily unavailable or in maintenance mode (UserMaintenance)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":503.*": {
                            "statusCode": "503",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:refreshAuthentication:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/authenticate/impersonate": {
            "get": {
                "description": "Get a temporary JSON Web Token (JWT) for a user (only available to root-level admins).",
                "operationId": "impersonate",
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "customerUsername",
                        "in": "query",
                        "description": "Username to impersonate",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "reason",
                        "in": "query",
                        "description": "Reason for impersonation",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JSON Web Token which should be saved by the client and passed in subsequent API calls\nusing the `Authorization: Bearer <token>` header.\n",
                        "schema": {
                            "$ref": "#/definitions/JWT"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "User not found or authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "503": {
                        "description": "User is temporarily unavailable or in maintenance mode (UserMaintenance)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":503.*": {
                            "statusCode": "503",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n\"customerUsername\":\"$input.params('customerUsername')\",\n\"reason\":\"$input.params('reason')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:impersonate:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/account": {
            "post": {
                "description": "Create a new account and get a JSON Web Token (JWT).",
                "operationId": "createAccount",
                "security": [
                    {
                      "api_key": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "New Account Information",
                        "in": "body",
                        "description": "New account information.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewAccount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JSON Web Token which should be saved by the client and passed in subsequent API calls\nusing the `Authorization: Bearer <token>` header.\n",
                        "schema": {
                            "$ref": "#/definitions/JWT"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest, UsernameLengthExceeded, PasswordLengthExceeded, PasswordTooShort)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "User already exists, etc. (UsernameUnavailable)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:createAccount:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "get": {
                "description": "Get account information about the currently authenticated user",
                "operationId": "getAccountInfo",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Specify whether to return extended information or not: type=extended",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the currently authenticated user.",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"type\" : \"$input.params('type')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getAccountInfo:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "put": {
                "description": "Update the account record for the currently authenticated user",
                "operationId": "updateAccount",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Information about the currently authenticated user.",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n#if( $input.path('$.username') != \"\" ),\"username\":\"$util.escapeJavaScript($input.path('$.username'))\"\n#end\n#if( $input.path('$.password') != \"\" ),\"password\":\"$util.escapeJavaScript($input.path('$.password')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.first_name') != \"\" ),\"first_name\":\"$util.escapeJavaScript($input.path('$.first_name')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.last_name') != \"\" ),\"last_name\":\"$util.escapeJavaScript($input.path('$.last_name')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.locale') != \"\" ),\"locale\":\"$util.escapeJavaScript($input.path('$.locale'))\"\n#end\n#if( $input.path('$.locale_best_match') != \"\" ),\"locale_best_match\":\"$util.escapeJavaScript($input.path('$.locale_best_match'))\"\n#end\n#if( $input.path('$.selected_locale') != \"\" ),\"selected_locale\":\"$util.escapeJavaScript($input.path('$.selected_locale'))\"\n#end\n#if( $input.path('$.email_opt_in') != \"\" ),\"email_opt_in\":$input.path('$.email_opt_in')\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:updateAccount:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/account/{userid}": {
            "parameters": [
                {
                    "name": "userid",
                    "in": "path",
                    "description": "Identifier of user account",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "description": "Deletes a user account, including all associated data",
                "operationId": "deleteAccount",
                "parameters": [
                    {
                        "name": "apikey",
                        "in": "body",
                        "description": "An API Key that authorizes a delete operation from a unit test.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/APIKey"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Account deleted",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "204",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$input.params('userid')\"\n#if( $input.path('$.apikey') != \"\" ),\"apikey\":\"$util.escapeJavaScript($input.path('$.apikey'))\"\n#end}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:deleteAccount:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'DELETE,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/account/export": {
            "get": {
                "description": "Export a user account into raw MySQL data, stored on Amazon S3. Only callable by a root-level admin.",
                "operationId": "accountExport",
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "customerUsername",
                        "in": "query",
                        "description": "Username of the account to export",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success information about the exported account.",
                        "schema": {
                            "$ref": "#/definitions/AccountExportQueries"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "User not found or authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "503": {
                        "description": "User is temporarily unavailable or in maintenance mode (UserMaintenance)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":503.*": {
                            "statusCode": "503",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n\"customerUsername\":\"$input.params('customerUsername')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:accountExport:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/account/email/verify": {
            "put": {
                "description": "Verify an email address.",
                "operationId": "verifyEmail",
                "security": [
                    {
                      "api_key": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "VerifyEmailRequest",
                        "in": "body",
                        "description": "The email verification id.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VerifyEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email verification result.",
                        "schema": {
                            "$ref": "#/definitions/SimpleResult"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:verifyEmail:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'PUT,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/account/email/verify/resend": {
            "post": {
                "description": "Request a new email verification email.",
                "operationId": "resendVerificationEmail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Request email verification result.",
                        "schema": {
                            "$ref": "#/definitions/SimpleResult"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:resendVerificationEmail:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/account/password/reset": {
            "post": {
                "description": "Request a password reset for an account.",
                "operationId": "requestResetPassword",
                "security": [
                    {
                      "api_key": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "resetid",
                        "in": "body",
                        "description": "The password reset id.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PasswordResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset result.",
                        "schema": {
                            "$ref": "#/definitions/SimpleResult"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest, UsernameLengthExceeded, PasswordLengthExceeded, PasswordTooShort)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:requestPasswordReset:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "put": {
                "description": "Update the account record for the currently authenticated user",
                "operationId": "resetPassword",
                "security": [
                    {
                      "api_key": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "resetid",
                        "in": "body",
                        "description": "The password reset id.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PasswordReset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset result.",
                        "schema": {
                            "$ref": "#/definitions/SimpleResult"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:passwordReset:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,PUT,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/account/password/update": {
            "put": {
                "description": "Update the account record for the currently authenticated user",
                "operationId": "updatePassword",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Whether or the password update succeeded.",
                        "schema": {
                            "$ref": "#/definitions/SimpleResult"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n#if( $input.path('$.current') != \"\" ),\"current\":\"$util.escapeJavaScript($input.path('$.current')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.new_password') != \"\" ),\"new_password\":\"$util.escapeJavaScript($input.path('$.new_password')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.reentered_password') != \"\" ),\"reentered_password\":\"$util.escapeJavaScript($input.path('$.reentered_password')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:updatePassword:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/account/profile-image/upload-urls": {
            "get": {
                "description": "Request URLs where a new profile image(s) can be uploaded to.",
                "operationId": "getProfileImageUploadURLs",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Request signed upload URLs.",
                        "schema": {
                            "$ref": "#/definitions/SimpleResult"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getProfileImageUploadURLs:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/account/profile-image/save": {
            "post": {
                "description": "Request newly-uploaded profile image(s) to be saved.",
                "operationId": "saveUploadedProfileImages",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Results of saving the images.",
                        "schema": {
                            "$ref": "#/definitions/SimpleResult"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n#if( $input.path('$.bucket') != \"\" ),\"bucket\":\"$util.escapeJavaScript($input.path('$.bucket'))\"\n#end\n#if( $input.path('$.largeSrcKey') != \"\" ),\"largeSrcKey\":\"$util.escapeJavaScript($input.path('$.largeSrcKey'))\"\n#end\n#if( $input.path('$.smallSrcKey') != \"\" ),\"smallSrcKey\":\"$util.escapeJavaScript($input.path('$.smallSrcKey'))\"\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:saveUploadedProfileImages:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/subscription": {
            "get": {
                "description": "Get the authenticated user's subscription record.",
                "operationId": "getSubscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "include_cc_info",
                        "in": "query",
                        "description": "Include credit card information",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subscription record for the currently authenticated user.",
                        "schema": {
                            "$ref": "#/definitions/Subscription"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n \"include_cc_info\" : \"$input.params('include_cc_info')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getSubscription:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/subscription/downgrade": {
            "post": {
                "description": "Downgrade to a free account.",
                "operationId": "downgradeSubscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Purchase result.",
                        "schema": {
                            "$ref": "#/definitions/SimpleResult"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:downgradeSubscription:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/subscription/purchase": {
            "post": {
                "description": "Initiates a purchase of a Todo Cloud premium account.",
                "operationId": "purchaseSubscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [
                    {
                        "name": "purchaseinfo",
                        "in": "body",
                        "description": "The information about the purchase.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PurchaseInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Purchase result.",
                        "schema": {
                            "$ref": "#/definitions/SimpleResult"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n#if( $input.path('$.subscription_id') != \"\" ),\"subscription_id\":\"$util.escapeJavaScript($input.path('$.subscription_id'))\"\n#end\n#if( $input.path('$.subscription_type') != \"\" ),\"subscription_type\":\"$util.escapeJavaScript($input.path('$.subscription_type'))\"\n#end\n#if( $input.path('$.total_charge') != \"\" ),\"total_charge\":\"$input.path('$.total_charge')\"\n#end\n#if( $input.path('$.stripe_token') != \"\" ),\"stripe_token\":\"$util.escapeJavaScript($input.path('$.stripe_token')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.last4') != \"\" ),\"last4\":\"$util.escapeJavaScript($input.path('$.last4'))\"\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:purchaseSubscription:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/subscription/purchases": {
            "get": {
                "description": "Get the currently authenticated user's payment history",
                "operationId": "getPaymentHistory",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Settings for the currently authenticated user.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/PaymentHistory"
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getPaymentHistory:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/subscription/purchases/{timestamp}/resend_receipt": {
            "post": {
                "description": "Resend a receipt for a specific purchase (specified with timestamp).",
                "operationId": "resendReceipt",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [
                    {
                        "name": "timestamp",
                        "in": "path",
                        "description": "Timestamp of the original purchase",
                        "required": true,
                        "type": "number",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Purchase result.",
                        "schema": {
                            "$ref": "#/definitions/SimpleResult"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"timestamp\" : $input.params('timestamp')\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:resendReceipt:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/user-settings": {
            "get": {
                "description": "Get account user settings about the currently authenticated user",
                "operationId": "getUserSettings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Settings for the currently authenticated user.",
                        "schema": {
                            "$ref": "#/definitions/UserSettings"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getUserSettings:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "put": {
                "description": "Update the user settings record for the currently authenticated user",
                "operationId": "updateUserSettings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Information about the currently authenticated user.",
                        "schema": {
                            "$ref": "#/definitions/UserSettings"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n#if( $input.path('$.timezone') != \"\" ),\"timezone\":\"$util.escapeJavaScript($input.path('$.timezone'))\"\n#end\n#if( $input.path('$.tag_filter_with_and') != \"\" ),\"tag_filter_with_and\":$input.path('$.tag_filter_with_and')\n#end\n#if( $input.path('$.tag_sort_order') != \"\" ),\"tag_sort_order\":$input.path('$.tag_sort_order')\n#end\n#if( $input.path('$.task_sort_order') != \"\" ),\"task_sort_order\":$input.path('$.task_sort_order')\n#end\n#if( $input.path('$.start_date_filter') != \"\" ),\"start_date_filter\":$input.path('$.start_date_filter')\n#end\n,\"all_list_filter_string\":\"$util.escapeJavaScript($input.path('$.all_list_filter_string'))\"\n\n#if( $input.path('$.default_duedate') != \"\" ),\"default_duedate\":$input.path('$.default_duedate')\n#end\n#if( $input.path('$.show_overdue_section') != \"\" ),\"show_overdue_section\":$input.path('$.show_overdue_section')\n#end\n#if( $input.path('$.skip_task_date_parsing') != \"\" ),\"skip_task_date_parsing\":$input.path('$.skip_task_date_parsing')\n#end\n#if( $input.path('$.skip_task_priority_parsing') != \"\" ),\"skip_task_priority_parsing\":$input.path('$.skip_task_priority_parsing')\n#end\n#if( $input.path('$.skip_task_list_parsing') != \"\" ),\"skip_task_list_parsing\":$input.path('$.skip_task_list_parsing')\n#end\n#if( $input.path('$.skip_task_tag_parsing') != \"\" ),\"skip_task_tag_parsing\":$input.path('$.skip_task_tag_parsing')\n#end\n#if( $input.path('$.skip_task_checklist_parsing') != \"\" ),\"skip_task_checklist_parsing\":$input.path('$.skip_task_checklist_parsing')\n#end\n#if( $input.path('$.skip_task_project_parsing') != \"\" ),\"skip_task_project_parsing\":$input.path('$.skip_task_project_parsing')\n#end\n#if( $input.path('$.skip_task_startdate_parsing') != \"\" ),\"skip_task_startdate_parsing\":\"$input.path('$.skip_task_startdate_parsing')\"\n#end\n#if( $input.path('$.new_feature_flags') != \"\" ),\"new_feature_flags\":\"$input.path('$.new_feature_flags')\"\n#end\n#if( $input.path('$.email_notification_defaults') != \"\" ),\"email_notification_defaults\":\"$input.path('$.email_notification_defaults')\"\n#end\n#if( $input.path('$.enable_google_analytics_tracking') != \"\" ),\"enable_google_analytics_tracking\":\"$input.path('$.enable_google_analytics_tracking')\"\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:updateUserSettings:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,PUT,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/lists": {
            "get": {
                "description": "Returns `TaskList` objects for the currently logged-in user. By default, this will return\nfiltered lists (according to the user's app settings).\n",
                "operationId": "getListsForUser",
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [
                    {
                        "name": "includeDeleted",
                        "in": "query",
                        "description": "Include deleted lists",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "includeFiltered",
                        "in": "query",
                        "description": "Filter the list according to the user app settings",
                        "required": false,
                        "type": "boolean",
                        "default": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/TaskList"
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"includeDeleted\" : \"$input.params('includeDeleted')\",\n  \"includeFiltered\" : \"$input.params('includeFiltered')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getLists:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "post": {
                "description": "Creates a new list for the logged-in user.",
                "operationId": "createList",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [
                    {
                        "name": "list",
                        "in": "body",
                        "description": "List to add",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewTaskList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New TaskList created",
                        "schema": {
                            "$ref": "#/definitions/TaskList"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n#if( $input.path('$.name') != \"\" ),\"name\":\"$util.escapeJavaScript($input.path('$.name')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.settings') != \"\" ),\"settings\":$input.json('$.settings')\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:createList:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/lists/{listid}": {
            "parameters": [
                {
                    "name": "listid",
                    "in": "path",
                    "description": "Identifier of list to get",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "description": "Returns a TaskList based on a single identifier.",
                "operationId": "getListById",
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TaskList response",
                        "schema": {
                            "$ref": "#/definitions/TaskList"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"listid\" : \"$input.params('listid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getList:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "put": {
                "description": "Update the specified TaskList",
                "operationId": "updateTaskList",
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [
                    {
                        "name": "list",
                        "in": "body",
                        "description": "List to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TaskList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TaskList updated",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"listid\" : \"$input.params('listid')\"\n#if( $input.path('$.name') != \"\" ),\"name\":\"$util.escapeJavaScript($input.path('$.name')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.deleted') != \"\" ),\"deleted\":$input.path('$.deleted')\n#end\n#if( $input.path('$.settings') != \"\" ),\"settings\":$input.json('$.settings')\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:updateList:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "delete": {
                "description": "Deletes a single TaskList from the identifier specified",
                "operationId": "deleteList",
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "TaskList deleted",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "204",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"listid\" : \"$input.params('listid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:deleteList:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,PUT,DELETE,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/lists/{listid}/count": {
            "parameters": [
                {
                    "name": "listid",
                    "in": "path",
                    "description": "Identifier of list to get",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "description": "Returns a TaskList based on a single identifier.",
                "operationId": "taskCountForList",
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TaskList response",
                        "schema": {
                            "$ref": "#/definitions/TaskList"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"listid\" : \"$input.params('listid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:taskCountForList:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,PUT,DELETE,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/smart-lists": {
            "get": {
                "description": "Returns `SmartList` objects for the currently logged-in user. By default, this will return\nfiltered lists (according to the user's app settings).\n",
                "operationId": "getSmartLists",
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/SmartList"
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getSmartLists:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "post": {
                "description": "Creates a new smart list for the logged-in user.",
                "operationId": "createSmartList",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [
                    {
                        "name": "smart-list",
                        "in": "body",
                        "description": "Smart List to add",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewSmartList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New SmartList created",
                        "schema": {
                            "$ref": "#/definitions/SmartList"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n#if( $input.path('$.name') != \"\" ),\"name\":\"$util.escapeJavaScript($input.path('$.name')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.color') != \"\" ),\"color\":\"$util.escapeJavaScript($input.path('$.color'))\"\n#end\n#if( $input.path('$.icon_name') != \"\" ),\"icon_name\":\"$util.escapeJavaScript($input.path('$.icon_name'))\"\n#end\n#if( $input.path('$.json_filter') != \"\" ),\"json_filter\":\"$util.escapeJavaScript($input.path('$.json_filter')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.default_list') != \"\" ),\"default_list\":\"$util.escapeJavaScript($input.path('$.default_list'))\"\n#end\n#if( $input.path('$.excluded_list_ids') || $input.path('$.excluded_list_ids') == \"\" ),\"excluded_list_ids\":\"$util.escapeJavaScript($input.path('$.excluded_list_ids'))\"\n#end\n#if( $input.path('$.completed_tasks_filter') != \"\" ),\"completed_tasks_filter\":\"$util.escapeJavaScript($input.path('$.completed_tasks_filter')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.sort_order') != \"\" ),\"sort_order\":$input.path('$.sort_order')\n#end\n#if( $input.path('$.sort_type') != \"\" ),\"sort_type\":$input.path('$.sort_type')\n#end\n#if( $input.path('$.default_due_date') != \"\" ),\"default_due_date\":$input.path('$.default_due_date')\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:createSmartList:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/smart-lists/{listid}": {
            "parameters": [
                {
                    "name": "listid",
                    "in": "path",
                    "description": "Identifier of smart list to get",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "description": "Returns a SmartList based on a single identifier.",
                "operationId": "getSmartListById",
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SmartList response",
                        "schema": {
                            "$ref": "#/definitions/SmartList"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"listid\" : \"$input.params('listid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getSmartList:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "put": {
                "description": "Update the specified SmartList",
                "operationId": "updateSmartList",
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [
                    {
                        "name": "list",
                        "in": "body",
                        "description": "Smart list to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SmartList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SmartList updated",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"listid\" : \"$input.params('listid')\"\n#if( $input.path('$.name') != \"\" ),\"name\":\"$util.escapeJavaScript($input.path('$.name')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.color') != \"\" ),\"color\":\"$util.escapeJavaScript($input.path('$.color'))\"\n#end\n#if( $input.path('$.icon_name') != \"\" ),\"icon_name\":\"$util.escapeJavaScript($input.path('$.icon_name'))\"\n#end\n#if( $input.path('$.json_filter') != \"\" ),\"json_filter\":\"$util.escapeJavaScript($input.path('$.json_filter')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.default_list') != \"\" ),\"default_list\":\"$util.escapeJavaScript($input.path('$.default_list'))\"\n#end\n#if( $input.path('$.excluded_list_ids') || $input.path('$.excluded_list_ids') == \"\" ),\"excluded_list_ids\":\"$util.escapeJavaScript($input.path('$.excluded_list_ids'))\"\n#end\n#if( $input.path('$.completed_tasks_filter') != \"\" ),\"completed_tasks_filter\":\"$util.escapeJavaScript($input.path('$.completed_tasks_filter')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.sort_order') != \"\" ),\"sort_order\":$input.path('$.sort_order')\n#end\n#if( $input.path('$.sort_type') != \"\" ),\"sort_type\":$input.path('$.sort_type')\n#end\n#if( $input.path('$.default_due_date') != \"\" ),\"default_due_date\":$input.path('$.default_due_date')\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:updateSmartList:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "delete": {
                "description": "Deletes a single SmartList from the identifier specified",
                "operationId": "deleteSmartList",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "SmartList deleted",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "204",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"listid\" : \"$input.params('listid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:deleteSmartList:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,PUT,DELETE,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/lists/{listid}/tasks": {
            "parameters": [
                {
                    "name": "listid",
                    "in": "path",
                    "description": "Identifier of list to get tasks from",
                    "required": true,
                    "type": "string"
                }                    
            ],
            "get": {
                "description": "Returns tasks from the specified list.",
                "operationId": "getTasksForList",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Paged offset of where to start getting tasks",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "default": 0
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "How many maximum tasks to return in this query",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "default": 20
                    },
                    {
                        "name": "completed_only",
                        "in": "query",
                        "description": "Return completed tasks only?",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }                    
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tasks response",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "tasks": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Task"
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"listid\" : \"$input.params('listid')\"#if( $input.params('page') != \"\" ),\"page\":$input.params('page')\n#end\n#if( $input.params('page_size') != \"\" ),\"page_size\":$input.params('page_size')\n#end\n#if( $input.params('completed_only') != \"\" ),\"completed_only\":$input.params('completed_only')\n#end\n\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getTasksForList:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/smart-lists/{listid}/tasks": {
            "parameters": [
                {
                    "name": "listid",
                    "in": "path",
                    "description": "Identifier of smart list to get tasks from",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "description": "Returns tasks from the specified smart list.",
                "operationId": "getTasksForSmartList",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Paged offset of where to start getting tasks",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "default": 0
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "How many tasks to return",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "default": 20
                    },
                    {
                        "name": "completed_only",
                        "in": "query",
                        "description": "Return completed tasks only?",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tasks response",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "tasks": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Task"
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"listid\" : \"$input.params('listid')\"#if( $input.params('page') != \"\" ),\"page\":$input.params('page')\n#end\n#if( $input.params('page_size') != \"\" ),\"page_size\":$input.params('page_size')\n#end\n#if( $input.params('completed_only') != \"\" ),\"completed_only\":$input.params('completed_only')\n#end\n\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getTasksForSmartList:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/tasks": {
            "post": {
                "description": "Creates a new task for the provieded list.",
                "operationId": "createTask",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [
                    {
                        "name": "task",
                        "in": "body",
                        "description": "Task to add",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NewTask"
                        }
                    },
                    {
                        "name": "tasks",
                        "in": "body",
                        "description": "Tasks to add in bulk",
                        "required": false,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "tasks": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/NewTask"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New Task created",
                        "schema": {
                            "$ref": "#/definitions/Task"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json":"{\n  \"userid\" : \"$context.authorizer.userid\"\n#if( $input.path('$.tasks') != \"\" ),\"tasks\":\"$util.escapeJavaScript($input.path('$.tasks')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.name') != \"\" ),\"name\":\"$util.escapeJavaScript($input.path('$.name')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.listid') != \"\" ),\"listid\":\"$util.escapeJavaScript($input.path('$.listid'))\"\n#end\n#if( $input.path('$.parentid') != \"\" ),\"parentid\":\"$util.escapeJavaScript($input.path('$.parentid'))\"\n#end\n#if( $input.path('$.note') != \"\" ),\"note\":\"$util.escapeJavaScript($input.path('$.note')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.startdate') != \"\" ),\"startdate\":$util.escapeJavaScript($input.path('$.startdate'))\n#end\n#if( $input.path('$.duedate') != \"\" ),\"duedate\":$util.escapeJavaScript($input.path('$.duedate'))\n#end\n#if( $input.path('$.due_date_has_time') != \"\" ),\"due_date_has_time\":$util.escapeJavaScript($input.path('$.due_date_has_time'))\n#end\n#if( $input.path('$.completiondate') != \"\" ),\"completiondate\":$util.escapeJavaScript($input.path('$.completiondate'))\n#end\n#if( $input.path('$.priority') != \"\" ),\"priority\":$util.escapeJavaScript($input.path('$.priority'))\n#end\n#if( $input.path('$.deleted') != \"\" ),\"deleted\":$util.escapeJavaScript($input.path('$.deleted'))\n#end\n#if( $input.path('$.task_type') != \"\" ),\"task_type\":$util.escapeJavaScript($input.path('$.task_type'))\n#end\n#if( $input.path('$.type_data') != \"\" ),\"type_data\":\"$util.escapeJavaScript($input.path('$.type_data')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.starred') != \"\" ),\"starred\":$util.escapeJavaScript($input.path('$.starred'))\n#end\n#if( $input.path('$.assigned_userid') != \"\" ),\"assigned_userid\":\"$util.escapeJavaScript($input.path('$.assigned_userid'))\"\n#end\n#if( $input.path('$.recurrence_type') != \"\" ),\"recurrence_type\":$util.escapeJavaScript($input.path('$.recurrence_type'))\n#end\n#if( $input.path('$.advanced_recurrence_string') != \"\" ),\"advanced_recurrence_string\":\"$util.escapeJavaScript($input.path('$.advanced_recurrence_string'))\"\n#end\n#if( $input.path('$.location_alert') != \"\" ),\"location_alert\":\"$util.escapeJavaScript($input.path('$.location_alert'))\"\n#end\n#if( $input.path('$.sort_order') != \"\" ),\"sort_order\":$util.escapeJavaScript($input.path('$.sort_order'))\n#end\n#if( $input.path('$.project_duedate') != \"\" ),\"project_duedate\":$util.escapeJavaScript($input.path('$.project_duedate'))\n#end\n#if( $input.path('$.project_duedate_has_time') != \"\" ),\"project_duedate_has_time\":$util.escapeJavaScript($input.path('$.project_duedate_has_time'))\n#end\n#if( $input.path('$.project_startdate') != \"\" ),\"project_startdate\":$util.escapeJavaScript($input.path('$.project_startdate'))\n#end\n#if( $input.path('$.project_priority') != \"\" ),\"project_priority\":$util.escapeJavaScript($input.path('$.project_priority'))\n#end\n#if( $input.path('$.project_starred') != \"\" ),\"project_starred\":$util.escapeJavaScript($input.path('$.project_starred'))\n#end\n#if( $input.path('$.parsed_tags') != \"\" ),\"parsed_tags\":$input.path('$.parsed_tags')\n#end\n#if( $input.path('$.parsed_subtasks') != \"\" ),\"parsed_subtasks\":$input.path('$.parsed_subtasks')\n#end\n#if( $input.path('$.parsed_taskitos') != \"\" ),\"parsed_taskitos\":$input.path('$.parsed_taskitos')\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:createTask:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/tasks/count": {
            "get": {
                "description": "Returns task counts for a user's lists and smart lists.",
                "operationId": "getTaskCounts",
                "parameters": [
                    {
                        "name": "selected_dates",
                        "in": "query",
                        "description": "Comma-separated dates in simple ISO 8601 format (date only: YYYY-MM-DD)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "completion_cutoff_date",
                        "in": "query",
                        "description": "Simple ISO format date (date only: YYYY-MM-DD) indicating to only return completed tasks which occur after the specified date.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task Counts Response",
                        "schema": {
                            "$ref": "#/definitions/TaskCounts"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n#if( $input.params('selected_dates') != \"\" ),\"selected_dates\":\"$input.params('selected_dates')\"\n#end\n#if( $input.params('completion_cutoff_date') != \"\" ),\"completion_cutoff_date\":\"$input.params('completion_cutoff_date')\"\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getTaskCounts:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/tasks/date_count": {
            "get": {
                "description": "Returns the number of tasks per day from the specified date range.",
                "operationId": "getTaskCountByDateRange",
                "parameters": [
                    {
                        "name": "smart_listid",
                        "in": "query",
                        "description": "Smart List ID (must specify smart_listid or listid but not both)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "listid",
                        "in": "query",
                        "description": "List ID (must specify smart_listid or listid but not both)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "begin_date",
                        "in": "query",
                        "description": "Simple ISO 8601 (date only: YYYY-MM-DD)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "end_date",
                        "in": "query",
                        "description": "Simple ISO 8601 (date only: YYYY-MM-DD)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task Date Range Counts Response",
                        "schema": {
                            "$ref": "#/definitions/TaskDateRangeCounts"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n#if( $input.params('smart_listid') != \"\" ),\"smart_listid\":\"$input.params('smart_listid')\"\n#end\n#if( $input.params('listid') != \"\" ),\"listid\":\"$input.params('listid')\"\n#end\n#if( $input.params('begin_date') != \"\" ),\"begin_date\":\"$input.params('begin_date')\"\n#end\n #if( $input.params('end_date') != \"\" ),\"end_date\":\"$input.params('end_date')\"\n#end\n\n\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getTaskCountByDateRange:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/tasks/{taskid}": {
            "parameters": [
                {
                    "name": "taskid",
                    "in": "path",
                    "description": "Identifier of task to operate on",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "description": "Returns a task based on a single identifier.",
                "operationId": "getTask",
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task response",
                        "schema": {
                            "$ref": "#/definitions/Task"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"taskid\" : \"$input.params('taskid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getTask:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "put": {
                "description": "Update the specified Task",
                "operationId": "updateTask",
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [
                    {
                        "name": "task",
                        "in": "body",
                        "description": "Task to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task updated",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"taskid\" : \"$input.params('taskid')\"\n#if( $input.path('$.name') != \"\" ),\"name\":\"$util.escapeJavaScript($input.path('$.name')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.listid') != \"\" ),\"listid\":\"$util.escapeJavaScript($input.path('$.listid'))\"\n#end\n,\"parentid\":\"$util.escapeJavaScript($input.path('$.parentid'))\"\n\n,\"note\":\"$util.escapeJavaScript($input.path('$.note')).replaceAll(\"\\\\'\",\"'\")\"\n\n#if( $input.path('$.startdate') != \"\" ),\"startdate\":$util.escapeJavaScript($input.path('$.startdate'))\n#end\n#if( $input.path('$.duedate') != \"\" ),\"duedate\":$util.escapeJavaScript($input.path('$.duedate'))\n#end\n#if( $input.path('$.due_date_has_time') != \"\" ),\"due_date_has_time\":$util.escapeJavaScript($input.path('$.due_date_has_time'))\n#end\n#if( $input.path('$.completiondate') != \"\" ),\"completiondate\":$util.escapeJavaScript($input.path('$.completiondate'))\n#end\n#if( $input.path('$.priority') != \"\" ),\"priority\":$util.escapeJavaScript($input.path('$.priority'))\n#end\n#if( $input.path('$.deleted') != \"\" ),\"deleted\":$util.escapeJavaScript($input.path('$.deleted'))\n#end\n#if( $input.path('$.task_type') != \"\" ),\"task_type\":$util.escapeJavaScript($input.path('$.task_type'))\n#end\n,\"type_data\":\"$util.escapeJavaScript($input.path('$.type_data')).replaceAll(\"\\\\'\",\"'\")\"\n\n#if( $input.path('$.starred') != \"\" ),\"starred\":$util.escapeJavaScript($input.path('$.starred'))\n#end\n,\"assigned_userid\":\"$util.escapeJavaScript($input.path('$.assigned_userid'))\"\n\n#if( $input.path('$.recurrence_type') != \"\" ),\"recurrence_type\":$util.escapeJavaScript($input.path('$.recurrence_type'))\n#end\n#if( $input.path('$.advanced_recurrence_string') != \"\" ),\"advanced_recurrence_string\":\"$util.escapeJavaScript($input.path('$.advanced_recurrence_string'))\"\n#end\n#if( $input.path('$.location_alert') != \"\" ),\"location_alert\":\"$util.escapeJavaScript($input.path('$.location_alert'))\"\n#end\n#if( $input.path('$.sort_order') != \"\" ),\"sort_order\":$util.escapeJavaScript($input.path('$.sort_order'))\n#end\n#if( $input.path('$.project_duedate') != \"\" ),\"project_duedate\":$util.escapeJavaScript($input.path('$.project_duedate'))\n#end\n#if( $input.path('$.project_duedate_has_time') != \"\" ),\"project_duedate_has_time\":$util.escapeJavaScript($input.path('$.project_duedate_has_time'))\n#end\n#if( $input.path('$.project_startdate') != \"\" ),\"project_startdate\":$util.escapeJavaScript($input.path('$.project_startdate'))\n#end\n#if( $input.path('$.project_priority') != \"\" ),\"project_priority\":$util.escapeJavaScript($input.path('$.project_priority'))\n#end\n#if( $input.path('$.project_starred') != \"\" ),\"project_starred\":$util.escapeJavaScript($input.path('$.project_starred'))\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:updateTask:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "delete": {
                "description": "Deletes a single Task from the identifier specified",
                "operationId": "deleteTask",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Task deleted",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "204",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"taskid\" : \"$input.params('taskid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:deleteTask:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,PUT,DELETE,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/tasks/{taskid}/count": {
            "parameters": [
                {
                    "name": "taskid",
                    "in": "path",
                    "description": "Identifier of task to operate on",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "description": "Returns a TaskList based on a single identifier.",
                "operationId": "getSubtaskCount",
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TaskList response",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count" : {
                                    "type": "integer",
                                    "format": "int64"
                                }
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"taskid\" : \"$input.params('taskid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getSubtaskCount:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,PUT,DELETE,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/tasks/complete": {
            "post": {
                "description": "Complete the specified tasks.",
                "operationId": "completeTasks",
                "parameters": [
                    {
                        "name": "taskid",
                        "in": "body",
                        "description": "Array of Task IDs to complete.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TaskIdentifiers"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of completed Task IDs",
                        "schema": {
                            "$ref": "#/definitions/TaskIdentifiers"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"#if( $input.path('$.tasks') != \"\" ),\"tasks\":$input.path('$.tasks')\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:completeTasks:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/tasks/uncomplete": {
            "post": {
                "description": "Uncomplete the specified tasks.",
                "operationId": "uncompleteTasks",
                "parameters": [
                    {
                        "name": "taskid",
                        "in": "body",
                        "description": "Array of Task IDs to mark as uncomplete.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TaskIdentifiers"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of uncompleted Task IDs",
                        "schema": {
                            "$ref": "#/definitions/TaskIdentifiers"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"#if( $input.path('$.tasks') != \"\" ),\"tasks\":$input.path('$.tasks')\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:uncompleteTasks:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/tasks/{taskid}/subtasks": {
            "parameters": [
                {
                    "name": "taskid",
                    "in": "path",
                    "description": "Identifier of project task to get subtasks from",
                    "required": true,
                    "type": "string"
                }                    
            ],
            "get": {
                "description": "Returns subtasks from the specified project taskid.",
                "operationId": "getSubtasks",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Paged offset of where to start getting subtasks",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "default": 0
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "How many maximum subtasks to return in this query",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "default": 20
                    },
                    {
                        "name": "completed_only",
                        "in": "query",
                        "description": "Return completed tasks only?",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }                    
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subtasks response",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "tasks": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Task"
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"taskid\" : \"$input.params('taskid')\"#if( $input.params('page') != \"\" ),\"page\":$input.params('page')\n#end\n#if( $input.params('page_size') != \"\" ),\"page_size\":$input.params('page_size')\n#end\n#if( $input.params('completed_only') != \"\" ),\"completed_only\":$input.params('completed_only')\n#end\n\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getSubtasks:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/tasks/{taskid}/tags": {
            "parameters": [
                {
                    "name": "taskid",
                    "in": "path",
                    "description": "Identifier of task to operate on",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "description": "Returns tags assigned to the specified task.",
                "operationId": "getTagsForTask",
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Tag"
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"taskid\" : \"$input.params('taskid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getTagsForTask:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/tasks/{taskid}/comments": {
            "parameters": [
                {
                    "name": "taskid",
                    "in": "path",
                    "description": "Identifier of task to operate on",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "description": "Returns comments assigned to the specified task.",
                "operationId": "getCommentsForTask",
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CommentWithUser"
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"taskid\" : \"$input.params('taskid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getCommentsForTask:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/tasks/{taskid}/notifications": {
            "parameters": [
                {
                    "name": "taskid",
                    "in": "path",
                    "description": "Identifier of task to operate on",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "description": "Returns notifications assigned to the specified task.",
                "operationId": "getNotificationsForTask",
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TaskNotification"
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"taskid\" : \"$input.params('taskid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getNotificationsForTask:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/tasks/{taskid}/tags/{tagid}": {
            "parameters": [
                {
                    "name": "taskid",
                    "in": "path",
                    "description": "Identifier of task to operate on",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "tagid",
                    "in": "path",
                    "description": "Identifier of tag to operate on",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Creates a new tag assignment.",
                "operationId": "assignTag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New Tag Assignment created",
                        "schema": {
                            "$ref": "#/definitions/TagAssignment"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"taskid\" : \"$input.params('taskid')\",\n  \"tagid\" : \"$input.params('tagid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:assignTag:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "delete": {
                "description": "Delete a tag assignment.",
                "operationId": "removeTagAssignment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Tag assignment deleted",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "204",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"taskid\" : \"$input.params('taskid')\",\n  \"tagid\" : \"$input.params('tagid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:removeTagAssignment:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,DELETE,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/tasks/search" : {
            "get": {
                "description": "Returns tasks from the specified list.",
                "operationId": "getTasksForSearchText",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Paged offset of where to start getting tasks",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "default": 0
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "How many maximum tasks to return in this query",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "default": 20
                    },
                    {
                        "name": "completed_only",
                        "in": "query",
                        "description": "Return completed tasks only?",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }                    
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tasks response",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "tasks": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Task"
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n#if( $input.params('page') != \"\" ),\"page\":$input.params('page')\n#end\n#if( $input.params('page_size') != \"\" ),\"page_size\":$input.params('page_size')\n#end\n#if( $input.params('completed_only') != \"\" ),\"completed_only\":$input.params('completed_only')\n#end\n#if( $input.params('search_text') != \"\" ),\"search_text\":\"$util.escapeJavaScript($input.params('search_text')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getTasksForSearchText:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/tags": {
            "get": {
                "description": "Returns `Tag` objects for the currently logged-in user.\n",
                "operationId": "getAllTags",
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Tag"
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getAllTags:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "post": {
                "description": "Creates a new tag.",
                "operationId": "createTag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [
                    {
                        "name": "tag",
                        "in": "body",
                        "description": "Tag to add",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewTag"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New Tag created",
                        "schema": {
                            "$ref": "#/definitions/Tag"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json":"{\n  \"userid\" : \"$context.authorizer.userid\"\n#if( $input.path('$.name') != \"\" ),\"name\":\"$util.escapeJavaScript($input.path('$.name')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:createTag:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/tags/{tagid}": {
            "parameters": [
                {
                    "name": "tagid",
                    "in": "path",
                    "description": "Identifier of tag to operate on",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "description": "Returns `Tag` objects for the currently logged-in user.\n",
                "operationId": "getTag",
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag response",
                        "schema": {
                            "$ref": "#/definitions/Tag"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"tagid\" : \"$input.params('tagid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getTag:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "put": {
                "description": "Updates a tag.",
                "operationId": "updateTag",
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [
                    {
                        "name": "tag",
                        "in": "body",
                        "description": "Tag to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Tag"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated tag",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json":"{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"tagid\" : \"$input.params('tagid')\"\n#if( $input.path('$.name') != \"\" ),\"name\":\"$util.escapeJavaScript($input.path('$.name')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:updateTag:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "delete": {
                "description": "Delete a tag.",
                "operationId": "deleteTag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Tag deleted",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "204",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"tagid\" : \"$input.params('tagid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:deleteTag:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,PUT,DELETE,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/comments": {
            "post": {
                "description": "Creates a new comment.",
                "operationId": "createComment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [
                    {
                        "name": "comment",
                        "in": "body",
                        "description": "Comment to add",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewComment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New Comment created",
                        "schema": {
                            "$ref": "#/definitions/Comment"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json":"{\n  \"userid\" : \"$context.authorizer.userid\"\n#if( $input.path('$.itemid') != \"\" ),\"itemid\":\"$util.escapeJavaScript($input.path('$.itemid'))\"\n#end\n#if( $input.path('$.text') != \"\" ),\"text\":\"$util.escapeJavaScript($input.path('$.text')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:createComment:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/comments/{commentid}": {
            "parameters": [
                {
                    "name": "commentid",
                    "in": "path",
                    "description": "Identifier of comment to operate on",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "description": "Returns the `Comment` with the given comment idea.\n",
                "operationId": "getComment",
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comment response",
                        "schema": {
                            "$ref": "#/definitions/Comment"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"commentid\" : \"$input.params('commentid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getComment:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "put": {
                "description": "Updates a comment.",
                "operationId": "updateComment",
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [
                    {
                        "name": "comment",
                        "in": "body",
                        "description": "Comment to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Comment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated comment",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json":"{\n  \"userid\" : \"$context.authorizer.userid\"\n,  \"commentid\" : \"$input.params('commentid')\"#if( $input.path('$.text') != \"\" ),\"text\":\"$util.escapeJavaScript($input.path('$.text')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:updateComment:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "delete": {
                "description": "Delete a comment.",
                "operationId": "deleteComment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Tag deleted",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "204",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"commentid\" : \"$input.params('commentid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:deleteComment:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'DELETE,PUT,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/notifications":{
            "get": {
                "description": "Returns notifications coming up soon for a user.",
                "operationId": "getNotificationsForUser",
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TaskNotification"
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getNotificationsForUser:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "post": {
                "description": "Creates a new task notification.",
                "operationId": "createNotification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [
                    {
                        "name": "notification",
                        "in": "body",
                        "description": "Task notification to add",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewTaskNotification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New task notification created",
                        "schema": {
                            "$ref": "#/definitions/TaskNotification"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json":"{\n  \"userid\" : \"$context.authorizer.userid\"\n#if( $input.path('$.taskid') != \"\" ),\"taskid\":\"$util.escapeJavaScript($input.path('$.taskid'))\"\n#end\n#if( $input.path('$.triggerdate') != \"\" ),\"triggerdate\":\"$util.escapeJavaScript($input.path('$.triggerdate'))\"\n#end\n#if( $input.path('$.triggeroffset') != \"\" ),\"triggeroffset\":\"$util.escapeJavaScript($input.path('$.triggeroffset'))\"\n#end\n#if( $input.path('$.sound_name') != \"\" ),\"sound_name\":\"$util.escapeJavaScript($input.path('$.sound_name'))\"\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:createNotification:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/notifications/{notificationid}":{
            "parameters": [
                {
                    "name": "notificationid",
                    "in": "path",
                    "description": "Identifier of notification to operate on",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "description": "Returns the `Notification` with the given notification id.\n",
                "operationId": "getNotification",
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification response",
                        "schema": {
                            "$ref": "#/definitions/TaskNotification"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"notificationid\" : \"$input.params('notificationid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getNotification:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "put": {
                "description": "Updates a notification.",
                "operationId": "updateNotification",
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [
                    {
                        "name": "notification",
                        "in": "body",
                        "description": "Comment to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TaskNotification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated notification",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json":"{\n  \"userid\" : \"$context.authorizer.userid\"\n,  \"notificationid\" : \"$input.params('notificationid')\"\n#if( $input.path('$.taskid') != \"\" ),\"taskid\":\"$util.escapeJavaScript($input.path('$.taskid'))\"\n#end\n#if( $input.path('$.triggerdate') != \"\" ),\"triggerdate\":\"$util.escapeJavaScript($input.path('$.triggerdate'))\"\n#end\n#if( $input.path('$.triggeroffset') != \"\" ),\"triggeroffset\":\"$util.escapeJavaScript($input.path('$.triggeroffset'))\"\n#end\n#if( $input.path('$.sound_name') != \"\" ),\"sound_name\":\"$util.escapeJavaScript($input.path('$.sound_name'))\"\n#end\n#if( $input.path('$.timestamp') != \"\" ),\"timestamp\":\"$util.escapeJavaScript($input.path('$.timestamp'))\"\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:updateNotification:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "delete": {
                "description": "Delete a notification.",
                "operationId": "deleteNotification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Notification deleted",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "204",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"notificationid\" : \"$input.params('notificationid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:deleteNotification:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,PUT,DELETE,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/checklist/{taskid}/items": {
            "parameters": [
                {
                    "name": "taskid",
                    "in": "path",
                    "description": "Identifier of checklist task to get items from",
                    "required": true,
                    "type": "string"
                }                    
            ],
            "get": {
                "description": "Returns taskitos from the specified checklist taskid.",
                "operationId": "getTaskitosForChecklist",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Paged offset of where to start getting items",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "default": 0
                    },
                    {
                        "name": "page_size",
                        "in": "query",
                        "description": "How many maximum items to return in this query",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "default": 20
                    },
                    {
                        "name": "completed_only",
                        "in": "query",
                        "description": "Return completed items only?",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }                    
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subtasks response",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "tasks": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ChecklistItem"
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"taskid\" : \"$input.params('taskid')\"#if( $input.params('page') != \"\" ),\"page\":$input.params('page')\n#end\n#if( $input.params('page_size') != \"\" ),\"page_size\":$input.params('page_size')\n#end\n#if( $input.params('completed_only') != \"\" ),\"completed_only\":$input.params('completed_only')\n#end\n\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getTaskitosForChecklist:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/checklist/items": {
            "post": {
                "description": "Creates a new checklist item.",
                "operationId": "createChecklistItem",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [
                    {
                        "name": "item",
                        "in": "body",
                        "description": "Checklist item to add",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewChecklistItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Newly created checklist item",
                        "schema": {
                            "$ref": "#/definitions/ChecklistItem"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json":"{\n  \"userid\" : \"$context.authorizer.userid\"\n#if( $input.path('$.name') != \"\" ),\"name\":\"$util.escapeJavaScript($input.path('$.name')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.parentid') != \"\" ),\"parentid\":\"$util.escapeJavaScript($input.path('$.parentid'))\"\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:createChecklistItem:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/checklist/items/{taskitoid}": {
            "parameters": [
                {
                    "name": "taskitoid",
                    "in": "path",
                    "description": "Identifier of checklist item to operate on",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "description": "Update the specified checklist item",
                "operationId": "updateChecklistItem",
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [
                    {
                        "name": "taskito",
                        "in": "body",
                        "description": "Update parameters",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateChecklistItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Checklist item updated",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"taskitoid\" : \"$input.params('taskitoid')\"\n#if( $input.path('$.parentid') != \"\" ),\"parentid\":\"$util.escapeJavaScript($input.path('$.parentid')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.name') != \"\" ),\"name\":\"$util.escapeJavaScript($input.path('$.name')).replaceAll(\"\\\\'\",\"'\")\"\n#end\n#if( $input.path('$.sort_order') != \"\" ),\"sort_order\":$util.escapeJavaScript($input.path('$.sort_order'))\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:updateChecklistItem:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "delete": {
                "description": "Deletes a single checklist item",
                "operationId": "deleteChecklistItem",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Checklist item deleted",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "204",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"taskitoid\" : \"$input.params('taskitoid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:deleteChecklistItem:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'PUT,DELETE,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/checklist/items/complete": {
            "post": {
                "description": "Complete the specified checklist items.",
                "operationId": "completeChecklistItems",
                "parameters": [
                    {
                        "name": "items",
                        "in": "body",
                        "description": "Array of checklist item ids to complete.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChecklistItemIdentifiers"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of completed checklist item IDs",
                        "schema": {
                            "$ref": "#/definitions/ChecklistItemIdentifiers"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"#if( $input.path('$.items') != \"\" ),\"items\":$input.path('$.items')\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:completeChecklistItems:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/checklist/items/uncomplete": {
            "post": {
                "description": "Uncomplete the specified checklist items.",
                "operationId": "uncompleteChecklistItems",
                "parameters": [
                    {
                        "name": "items",
                        "in": "body",
                        "description": "Array of checklist item ids to uncomplete.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChecklistItemIdentifiers"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of completed checklist item IDs",
                        "schema": {
                            "$ref": "#/definitions/ChecklistItemIdentifiers"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"#if( $input.path('$.items') != \"\" ),\"items\":$input.path('$.items')\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:uncompleteChecklistItems:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/system/notification": {
            "get": {
                "description": "Returns the latest system notification.",
                "operationId": "getLatestSystemNotification",
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SystemNotification"
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "System notification not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getLatestSystemNotification:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/invitations": {
            "post": {
                "description": "Creates and send a list invitation..",
                "operationId": "sendListInvitation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [
                    {
                        "name": "invitation_request",
                        "in": "body",
                        "description": "Parameters for creating the invitation",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InvitationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New invitation created and sent",
                        "schema": {
                            "$ref": "#/definitions/Invitation"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json":"{\n  \"userid\" : \"$context.authorizer.userid\"\n#if( $input.path('$.listid') != \"\" ),\"listid\":\"$util.escapeJavaScript($input.path('$.listid'))\"\n#end\n#if( $input.path('$.email') != \"\" ),\"email\":\"$util.escapeJavaScript($input.path('$.email'))\"\n#end\n#if( $input.path('$.membership_type') != \"\" ),\"membership_type\":\"$util.escapeJavaScript($input.path('$.membership_type'))\"\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:sendListInvitation:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            },
            "get": {
                "description": "Returns `Invitation` objects when the logged in user has access to that list.",
                "operationId": "getInvitations",
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Invitation"
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json":"{\n  \"userid\" : \"$context.authorizer.userid\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getInvitations:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            }
        },
        "/invitations/{invitationid}": {
            "parameters": [
                {
                    "name": "invitationid",
                    "in": "path",
                    "description": "Identifier of invitation item to operate on",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "description": "Returns a list invitation for the given invitation id with related information.\n",
                "operationId": "getInvitation",
                "security": [
                    {
                      "api_key": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Notification response",
                        "schema": {
                            "type" : "object",
                            "properties" : {
                                "invitation" : {
                                    "$ref" : "#/definitions/Invitation"
                                },
                                "account" : {
                                    "$ref" : "#/definitions/Account"
                                },
                                "list" : {
                                    "$ref" : "#/definitions/TaskList"
                                }
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"userid\" : \"$context.authorizer.userid\",\n  \"invitationid\" : \"$input.params('invitationid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getInvitation:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "post": {
                "description": "Accepts a list invitation for an authenticated user.",
                "operationId": "acceptInvitation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Successful response when there are no errors",
                        "schema": {
                            "$ref": "#/definitions/SimpleResult"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json":"{\n  \"userid\" : \"$context.authorizer.userid\",\n \"invitationid\" : \"$input.params('invitationid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:acceptInvitation:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "put": {
                "description": "Update a list invitation's role.",
                "operationId": "updateInvitationRole",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Successful response when there are no errors",
                        "schema": {
                            "$ref": "#/definitions/Invitation"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json":"{\n  \"userid\" : \"$context.authorizer.userid\",\n \"invitationid\" : \"$input.params('invitationid')\"\n#if( $input.path('$.membership_type') != \"\" ),\"membership_type\":\"$util.escapeJavaScript($input.path('$.membership_type'))\"\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:updateInvitationRole:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "delete": {
                "description": "Deletes a list invitation",
                "operationId": "deleteInvitation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Invitation item deleted",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "204",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json":"{\n  \"userid\" : \"$context.authorizer.userid\",\n \"invitationid\" : \"$input.params('invitationid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:deleteInvitation:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/invitations/{invitationid}/resend": {
            "parameters": [
                {
                    "name": "invitationid",
                    "in": "path",
                    "description": "Identifier of invitation item to operate on",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "description": "Resends a list invitation email.",
                "operationId": "resendInvitation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Successful response when there are no errors",
                        "schema": {
                            "$ref": "#/definitions/SimpleResult"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json":"{\n  \"userid\" : \"$context.authorizer.userid\",\n \"invitationid\" : \"$input.params('invitationid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:resendInvitation:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'PUT,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/list-member/{memberid}/role": {
            "parameters": [
                {
                    "name": "memberid",
                    "in": "path",
                    "description": "Identifier of the user whose role is to change",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "description": "Update/change a list member's role.",
                "operationId": "changeRole",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [
                    {
                        "name": "items",
                        "in": "body",
                        "description": "Information about the list and role to update.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RoleChangeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response when there are no errors",
                        "schema": {
                            "$ref": "#/definitions/SimpleResult"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json":"{\n  \"userid\" : \"$context.authorizer.userid\",\n \"memberid\" : \"$input.params('memberid')\"\n#if( $input.path('$.listid') != \"\" ),\"listid\":\"$util.escapeJavaScript($input.path('$.listid'))\"\n#end\n#if( $input.path('$.role') != \"\" ),\"role\":\"$util.escapeJavaScript($input.path('$.role'))\"\n#end\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:changeRole:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'PUT,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/list-member/{memberid}/remove/{listid}": {
            "parameters": [
                {
                    "name": "memberid",
                    "in": "path",
                    "description": "Identifier of the user whose list membership will be removed.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "listid",
                    "in": "path",
                    "description": "Identifier of the list to remove the membership from",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "description": "Remove a list membership",
                "operationId": "removeMembership",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Membership item deleted",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "404": {
                        "description": "Task list not found (NotFound)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "204",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":404.*": {
                            "statusCode": "404",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json":"{\n  \"userid\" : \"$context.authorizer.userid\",\n \"memberid\" : \"$input.params('memberid')\",\n \"listid\" : \"$input.params('listid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:removeMembership:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'DELETE,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/list-member": {
            "get": {
                "description": "Get info about all the users that share a list with the current user.",
                "operationId": "getMembersForAllLists",
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Account"
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json":"{\n  \"userid\" : \"$context.authorizer.userid\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getMembersForAllLists:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/list/{listid}/members": {
            "parameters": [
                {
                    "name": "listid",
                    "in": "path",
                    "description": "Identifier of the list whose members are to be retrieved.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "description": "Returns `ListMembership` objects for the given listid when the logged in user has access to that list.",
                "operationId": "getMembersForList",
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type":"object",
                                "properties": {
                                    "membership": {
                                        "$ref": "#/definitions/ListMembership"
                                    },
                                    "account": {
                                        "$ref": "#/definitions/Account"
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json":"{\n  \"userid\" : \"$context.authorizer.userid\",\n \"listid\" : \"$input.params('listid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getMembersForList:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/lists/{listid}/invitations": {
            "parameters": [
                {
                    "name": "listid",
                    "in": "path",
                    "description": "Identifier of the list whose invitations are to be retrieved.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "description": "Returns `Invitation` objects for the given listid when the logged in user has access to that list.",
                "operationId": "getInvitationsForList",
                "security": [
                    {
                        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": []
                    },
                    {
                      "api_key": []
                    }
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Invitation"
                            }
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json":"{\n  \"userid\" : \"$context.authorizer.userid\",\n \"listid\" : \"$input.params('listid')\"\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:getInvitationsForList:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        },
        "/app/latest": {
            "get": {
                "description": "Allows a client app to check for app updates.",
                "operationId": "checkForUpdates",
                "security": [
                    {
                      "api_key": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Client version of the app",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "dist",
                        "in": "query",
                        "description": "Distribution type: test | beta | prod",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "platform",
                        "in": "query",
                        "description": "Operating system running on the client: windows | macos",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "arch",
                        "in": "query",
                        "description": "The architecture of the client: x64 | ia32 | etc",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New version of the app available",
                        "schema": {
                            "$ref": "#/definitions/AppUpdate"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "204": {
                        "description": "No update available",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "400": {
                        "description": "Invalid parameters or otherwise bad request (BadRequest)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "403": {
                        "description": "Not authorized (Unauthorized)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    },
                    "500": {
                        "description": "Unexpected error (ServerError)",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*httpStatus\\\":204.*": {
                            "statusCode": "204",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{\n}"
                            }
                        },
                        ".*httpStatus\\\":400.*": {
                            "statusCode": "400",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":403.*": {
                            "statusCode": "403",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        },
                        ".*httpStatus\\\":500.*": {
                            "statusCode": "500",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\n{\r\n  \"code\" : \"$errorMessageObj.errorType\",\r\n  \"message\" : \"$errorMessageObj.message\"\r\n}"
                            }
                        }
                    },
                    "requestTemplates": {
                        "application/json": "{\n  \"version\" : \"$input.params('version')\",\n \"dist\" : \"$input.params('dist')\", \"platform\" : \"$input.params('platform')\",\n \"arch\" : \"$input.params('arch')\"\n\n}\n"
                    },
                    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:checkForUpdates:FUNCTION_ALIAS/invocations",
                    "passthroughBehavior": "when_no_match",
                    "httpMethod": "POST",
                    "contentHandling": "CONVERT_TO_TEXT"
                }
            },
            "options": {
                "summary": "CORS support",
                "description": "Enable CORS by returning correct headers\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CORS"
                ],
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200\n}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "responseTemplates": {
                                "application/json": "{}\n"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {"type": "string"},
                            "Access-Control-Allow-Methods": {"type": "string"},
                            "Access-Control-Allow-Origin": {"type": "string"}
                        }
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "api_key": {
            "type": "apiKey",
            "name": "x-api-key",
            "in": "header"
        },
        "todo-cloud-jwt-authorizer-FUNCTION_ALIAS": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "x-amazon-apigateway-authtype": "custom",
            "x-amazon-apigateway-authorizer": {
                "type": "token",
                "authorizerResultTtlInSeconds": 300,
                "authorizerUri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:398938165940:function:authorize:FUNCTION_ALIAS/invocations"
            }
        }
    },
    "definitions": {
        "Credentials": {
            "type": "object",
            "required": [
                "username",
                "password"
            ],
            "properties": {
                "username": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "JWT": {
            "type": "object",
            "required": [
                "userid",
                "token"
            ],
            "properties": {
                "userid": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "NewAccount": {
            "type": "object",
            "required": [
                "username",
                "password",
                "first_name",
                "last_name"
            ],
            "properties": {
                "username": {
                    "type": "string",
                    "description": "Must be in email format not to exceed 100 characters long."
                },
                "password": {
                    "type": "string",
                    "description": "Must be between 6 and 64 characters long."
                },
                "first_name": {
                    "type": "string",
                    "description": "Must not exceed 60 characters long."
                },
                "last_name": {
                    "type": "string",
                    "description": "Must not exceed 60 characters long."
                },
                "locale": {
                    "type": "string",
                    "description": "Should be in format of <2-char lang>-<2-char country>. Language codes from ISO 639-1 and country codes from ISO 3166-1 are used."
                },
                "locale_best_match": {
                    "type": "string",
                    "description": "MUST be one of: en-US, de-DE, es-MX, fr-FR, it-IT, ja-JP, pt-BR, ru-RU, zh-CN, zh-TW"
                },
                "email_opt_in": {
                    "type": "boolean",
                    "description": "If not specified, false is assumed."
                }
            }
        },
        "Account": {
            "type": "object",
            "properties": {
                "userid": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "Subscription": {
            "type": "object",
            "properties": {
                "subscriptionid": {
                    "type": "string"
                },
                "userid": {
                    "type": "string"
                },
                "expiration_date": {
                    "type": "integer",
                    "format": "int64"
                },
                "type": {
                    "type": "integer",
                    "format": "int32"
                },
                "level": {
                    "type": "integer",
                    "format": "int32"
                },
                "teamid": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer",
                    "format": "int64"
                }                
            }
        },
        "UserSettings": {
            "type": "object",
            "properties": {
                "userid": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "user_inbox": {
                    "type": "string"
                },
                "tag_filter_with_and": {
                    "type": "boolean"
                },
                "task_sort_order": {
                    "type": "integer",
                    "format": "int32"
                },
                "start_date_filter": {
                    "type": "integer",
                    "format": "int32"
                },
                "task_creation_email": {
                    "type": "string"
                },
                "referral_code": {
                    "type": "string"
                },
                "all_list_filter_string": {
                    "type": "string"
                },
                "default_duedate": {
                    "type": "integer",
                    "format": "int32"
                },
                "show_overdue_section": {
                    "type": "boolean"
                },
                "skip_task_date_parsing": {
                    "type": "boolean"
                },
                "skip_task_priority_parsing": {
                    "type": "boolean"
                },
                "skip_task_list_parsing": {
                    "type": "boolean"
                },
                "skip_task_tag_parsing": {
                    "type": "boolean"
                },
                "skip_task_checklist_parsing": {
                    "type": "boolean"
                },
                "skip_task_project_parsing": {
                    "type": "boolean"
                },
                "skip_task_startdate_parsing": {
                    "type": "boolean"
                },
                "new_feature_flags": {
                    "type": "integer",
                    "format": "int64"
                },
                "email_notification_defaults": {
                    "type": "integer",
                    "format": "int32"
                },
                "enable_google_analytics_tracking": {
                    "type": "boolean"
                }
            }
        },
        "Task": {
            "type": "object",
            "required": [
                "identifier",
                "name",
                "creation_timestamp"
            ],
            "properties": {
                "identifier": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "creation_timestamp": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "NewTask": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "listid": {
                    "type": "string"
                },
                "parentid": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "startdate": {
                    "type": "integer",
                    "format": "int64"
                },
                "duedate": {
                    "type": "integer",
                    "format": "int64"
                },
                "due_date_has_time": {
                    "type": "boolean"
                },
                "completiondate": {
                    "type": "integer",
                    "format": "int64"
                },
                "priority": {
                    "type": "integer",
                    "format": "int32"
                },
                "deleted": {
                    "type": "boolean"
                },
                "task_type": {
                    "type": "integer",
                    "format": "int32"
                },
                "type_data": {
                    "type": "string"
                },
                "starred": {
                    "type": "boolean"
                },
                "assigned_userid": {
                    "type": "string"
                },
                "recurrence_type": {
                    "type": "integer",
                    "format": "int32"
                },
                "advanced_recurrence_string": {
                    "type": "string"
                },
                "location_alert": {
                    "type": "string"
                },
                "sort_order": {
                    "type": "integer",
                    "format": "int32"
                },
                "project_startdate": {
                    "type": "integer",
                    "format": "int64"
                },
                "project_duedate": {
                    "type": "integer",
                    "format": "int64"
                },
                "project_due_date_has_time": {
                    "type": "boolean"
                },
                "project_priority": {
                    "type": "integer",
                    "format": "int32"
                },
                "project_starred": {
                    "type": "boolean"
                },
                "parsed_tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "parsed_subtasks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "parsed_taskitos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "client_taskid": {
                    "type": "string"
                }
            }
        },
        "TaskList": {
            "type": "object",
            "required": [
                "identifier",
                "name",
                "timestamp"
            ],
            "properties": {
                "identifier": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer",
                    "format": "int64"
                },
                "settings": {
                    "$ref": "#/definitions/ListSettings"
                }
            }
        },
        "NewTaskList": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "NewSmartList": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                },
                "completed_task_filter": {
                    "type": "string"
                },
                "default_due_date": {
                    "type": "integer",
                    "format": "int32"
                },
                "default_list": {
                    "type": "string"
                },
                "excluded_list_ids": {
                    "type": "string"
                },
                "icon_name": {
                    "type": "string"
                },
                "json_filter": {
                    "type": "string"
                },
                "list_id": {
                    "type": "string"
                },
                "sort_order": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort_type": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "SimpleResult": {
            "type": "object",
            "required": [
                "success"
            ],
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "ErrorModel": {
            "type": "object",
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "PasswordReset": {
            "type": "object",
            "required": [
                "resetid",
                "password"
            ],
            "properties": {
                "resetid": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "PasswordResetRequest": {
            "type": "object",
            "required": [
                "username"
            ],
            "properties": {
                "username": {
                    "type": "string"
                }
            }
        },
        "SmartList": {
            "type": "object",
            "required": [
                "identifier",
                "name",
                "creation_timestamp"
            ],
            "properties": {
                "identifier": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "icon_name": {
                    "type": "string"
                },
                "creation_timestamp": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "TaskCounts": {
            "type": "object",
            "required": [
                "tasks",
                "smart_lists"
            ],
            "properties": {
                "tasks": {
                    "type": "object"
                },
                "smart_lists": {
                    "type": "object"
                }
            }
        },
        "TaskIdentifiers": {
            "type": "object",
            "required": [
                "tasks"
            ],
            "properties": {
                "tasks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
         "VerifyEmailRequest": {
            "type": "object",
            "required": [
                "verificationid"
            ],
            "properties": {
                "verificationid": {
                    "type": "string"
                }
            }
        },
        "ListSettings": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "icon_name": {
                    "type": "string"
                },
                "sort_order": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort_type": {
                    "type": "integer",
                    "format": "int32"
                },
                "default_due_date": {
                    "type": "integer",
                    "format": "int64"
                },
                "task_notifications": {
                    "type": "integer",
                    "format": "int32"
                },
                "user_notifications": {
                    "type": "integer",
                    "format": "int32"
                },
                "comment_notifications": {
                    "type": "integer",
                    "format": "int32"
                },
                "notify_assigned_only": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "APIKey": {
            "type": "object",
            "properties": {
                "apikey": {
                    "type": "string"
                }
            }
        },
        "Tag": {
            "type": "object",
            "required" : [
                "tagid",
                "name"
            ],
            "properties": {
                "tagid": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "NewTag": {
            "type": "object",
            "required" : [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "TagAssignment": {
            "type": "object",
            "required" : [
                "tagid",
                "taskid"
            ],
            "properties": {
                "tagid": {
                    "type": "string"
                },
                "taskid": {
                    "type": "string"
                }
            }
        },
        "NewComment": {
            "type": "object",
            "required": [
                "userid",
                "itemid",
                "text"
            ],
            "properties": {
                "userid": {
                    "type": "string"
                },
                "itemid": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "Comment": {
            "type": "object",
            "required":[
                "commentid",
                "userid",
                "itemid",
                "item_type",
                "timestamp"
            ],
            "properties": {
                "commentid": {
                    "type": "string"
                },
                "userid": {
                    "type": "string"
                },
                "itemid": {
                    "type": "string"
                },
                "item_type": {
                    "type": "integer",
                    "format": "int64"
                },
                "item_name": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "CommentWithUser": {
            "type": "object",
            "required": [
                "comment",
                "user"
            ],
            "properties": {
                "comment": {
                    "$ref": "#/definitions/Comment"
                },
                "user": {
                    "$ref": "#/definitions/Account"
                }
            }
        },
        "TaskNotification": {
            "type": "object",
            "required": [
                "notificationid",
                "taskid",
                "triggerdate",
                "triggeroffset",
                "timestamp"
            ],
            "properties": {
                "notificationid": {
                    "type": "string"
                },
                "taskid": {
                    "type": "string"
                },
                "sound_name": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer",
                    "format": "int64"
                },
                "triggerdate": {
                    "type": "integer",
                    "format": "int64"
                },
                "triggeroffset": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "NewTaskNotification": {
            "type": "object",
            "required": [
                "taskid"
            ],
            "properties": {
                "notificationid": {
                    "type": "string"
                },
                "taskid": {
                    "type": "string"
                },
                "sound_name": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer",
                    "format": "int64"
                },
                "triggerdate": {
                    "type": "integer",
                    "format": "int64"
                },
                "triggeroffset": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "ChecklistItem": {
            "type": "object",
            "required": [
                "name",
                "parentid"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "parentid": {
                    "type": "string"
                },
                "sort_order": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "NewChecklistItem": {
            "type": "object",
            "required": [
                "name",
                "parentid"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "parentid": {
                    "type": "string"
                },
                "sort_order": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "UpdateChecklistItem": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "sort_order": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "ChecklistItemIdentifiers": {
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "SystemNotification": {
            "type": "object",
            "required": [
                "notificationid",
                "message",
                "timestamp",
                "learn_more_url"
            ],
            "properties": {
                "notificationid" : {
                    "type" : "string"
                },
                "message" : {
                    "type" : "string"
                },
                "timestamp" : {
                    "type": "integer",
                    "format": "int64"
                },
                "learn_more_url" : {
                    "type" : "string"
                }
            }
        },
        "TaskCount": {
            "type": "object",
            "required": [
                "count",
                "overdue"
            ],
            "properties": {
                "count" : {
                    "type": "integer",
                    "format": "int64"
                },
                "overdue" : {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "TaskDateRangeCounts": {
            "type": "object",
            "required": [
                "dates"
            ],
            "properties": {
                "dates": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "PurchaseInfo": {
            "type": "object",
            "properties": {
                "subscription_id" : {
                    "type": "string"
                },
                "subscription_type" : {
                    "type": "string"
                },
                "total_charge" : {
                    "type": "number",
                    "format": "float"
                },
                "stripe_token" : {
                    "type": "string"
                },
                "last4" : {
                    "type": "string"
                }
            }
        },
        "PaymentHistory": {
            "type": "object",
            "properties": {
                "timestamp" : {
                    "type": "integer",
                    "format": "int64"
                },
                "subscription_type" : {
                    "type": "string"
                },
                "description" : {
                    "type": "string"
                }
            }
        },
        "Invitation": {
            "type": "object",
            "properties":{
                "invitationid" : {
                    "type" : "string"
                },
                "userid" : {
                    "type" :"string"
                },
                "listid" : {
                    "type" :"string"
                },
                "email" : {
                    "type" :"string"
                },
                "invited_userid": {
                    "type" :"string"
                },
                "timestamp":{
                    "type" : "integer",
                    "format": "int64"
                },
                "membership_type":{
                    "type" : "integer",
                    "format": "int64"
                }
            }
        },
        "InvitationRequest": {
            "type": "object",
            "properties":{
                "listid" : {
                    "type" :"string"
                },
                "email" : {
                    "type" :"string"
                },
                "membership_type":{
                    "type" : "integer",
                    "format": "int64"
                }
            }
        },
        "RoleChangeRequest": {
            "type": "object",
            "properties":{
                "listid" : {
                    "type" :"string"
                },
                "membership_type":{
                    "type" : "integer",
                    "format": "int64"
                }
            }
        },
        "ListMembership": {
            "type": "object",
            "properties":{
                "userid" : {
                    "type" :"string"
                },
                "listid" : {
                    "type" :"string"
                },
                "membership_type":{
                    "type" : "integer",
                    "format": "int64"
                }
            }
        },
        "AppUpdate": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "pub_date": {
                    "type": "string"
                }
            }
        },
        "AccountExportQueries": {
            "type": "object",
            "required": [
                "success",
                "statements"
            ],
            "properties": {
                "success" : {
                    "type": "boolean"
               },
                "statements": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
       }
    }
}